/*
 * AutoPeer
 *
 * AutoPeering Negotiation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using LUJEWebsite.PeeringApi.Converters;

namespace LUJEWebsite.PeeringApi.Models
{ 
    /// <summary>
    /// BGP Session Request
    /// </summary>
    [DataContract]
    public partial class SessionRequestItem : IEquatable<SessionRequestItem>
    {
        /// <summary>
        /// Gets or Sets LocalAsn
        /// </summary>
        [DataMember(Name="local_asn", EmitDefaultValue=true)]
        public int LocalAsn { get; set; }

        /// <summary>
        /// Gets or Sets LocalIp
        /// </summary>
        [DataMember(Name="local_ip", EmitDefaultValue=false)]
        public string LocalIp { get; set; }

        /// <summary>
        /// Gets or Sets PeerAsn
        /// </summary>
        [DataMember(Name="peer_asn", EmitDefaultValue=true)]
        public int PeerAsn { get; set; }

        /// <summary>
        /// Gets or Sets PeerIp
        /// </summary>
        [DataMember(Name="peer_ip", EmitDefaultValue=false)]
        public string PeerIp { get; set; }

        /// <summary>
        /// Gets or Sets PeerType
        /// </summary>
        [DataMember(Name="peer_type", EmitDefaultValue=false)]
        public string PeerType { get; set; }

        /// <summary>
        /// Gets or Sets Md5
        /// </summary>
        [DataMember(Name="md5", EmitDefaultValue=false)]
        public string Md5 { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionRequestItem {\n");
            sb.Append("  LocalAsn: ").Append(LocalAsn).Append("\n");
            sb.Append("  LocalIp: ").Append(LocalIp).Append("\n");
            sb.Append("  PeerAsn: ").Append(PeerAsn).Append("\n");
            sb.Append("  PeerIp: ").Append(PeerIp).Append("\n");
            sb.Append("  PeerType: ").Append(PeerType).Append("\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionRequestItem)obj);
        }

        /// <summary>
        /// Returns true if SessionRequestItem instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionRequestItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocalAsn == other.LocalAsn ||
                    
                    LocalAsn.Equals(other.LocalAsn)
                ) && 
                (
                    LocalIp == other.LocalIp ||
                    LocalIp != null &&
                    LocalIp.Equals(other.LocalIp)
                ) && 
                (
                    PeerAsn == other.PeerAsn ||
                    
                    PeerAsn.Equals(other.PeerAsn)
                ) && 
                (
                    PeerIp == other.PeerIp ||
                    PeerIp != null &&
                    PeerIp.Equals(other.PeerIp)
                ) && 
                (
                    PeerType == other.PeerType ||
                    PeerType != null &&
                    PeerType.Equals(other.PeerType)
                ) && 
                (
                    Md5 == other.Md5 ||
                    Md5 != null &&
                    Md5.Equals(other.Md5)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + LocalAsn.GetHashCode();
                    if (LocalIp != null)
                    hashCode = hashCode * 59 + LocalIp.GetHashCode();
                    
                    hashCode = hashCode * 59 + PeerAsn.GetHashCode();
                    if (PeerIp != null)
                    hashCode = hashCode * 59 + PeerIp.GetHashCode();
                    if (PeerType != null)
                    hashCode = hashCode * 59 + PeerType.GetHashCode();
                    if (Md5 != null)
                    hashCode = hashCode * 59 + Md5.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionRequestItem left, SessionRequestItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionRequestItem left, SessionRequestItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
